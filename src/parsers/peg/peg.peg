# Parsing Expression Grammar definition from:
# Parsing Expression Grammars: A Recognition-Based Syntactic Foundation
# 
# Alterations from the original:
# [1] Comment production
# [2] Range production

# Hierarchical syntax
Grammar     <- Spacing Definition+ EndOfFile
Definition  <- Identifier LEFTARROW Expression

Expression  <- Sequence (SLASH Sequence)*
Sequence    <- Prefix*
Prefix      <- (AND / NOT)? Suffix
Suffix      <- Primary (QUESTION / STAR / PLUS)?
Primary     <- Identifier !LEFTARROW
             / OPEN Expression CLOSE
             / Literal / Class / DOT
	     
# Lexical syntax
Identifier  <- IdentStart IdentCont* Spacing
IdentStart  <- [a-zA-Z_]
IdentCont   <- IdentStart / [0-9]

Literal     <- ['] (!['] Char)* ['] Spacing
             / ["] (!["] Char)* ["] Spacing
Class       <- '[' (!']' Range)* ']' Spacing
# [2] The added !']' will allow a hyphen at the end of a Class [a-].
#     This is standard in most re engines.
Range       <- Char '-' !']' Char / Char
Char        <- '\\' [nrt'\"\[\]\\]
             / '\\' [0-2][0-7][0-7]
             / '\\' [0-7][0-7]?
             / !'\\' .
		 
LEFTARROW   <- '<-' Spacing
SLASH       <- '/' Spacing
AND         <- '&' Spacing
NOT         <- '!' Spacing
QUESTION    <- '?' Spacing
STAR 	    <- '*' Spacing
PLUS 	    <- '+' Spacing
OPEN 	    <- '(' Spacing
CLOSE       <- ')' Spacing
DOT         <- '.' Spacing

Spacing     <- (Space / Comment)*
# [1] This won't work if the comment is at the end of the input.
#     Comment     <- '#' (!EndOfLine .)* EndOfLine
#     This altered rule will stop consuming *if* EndOfLine is true *or*
#     . fails. !EndOfLine will not consume, but the calling Spacing will.
Comment     <- '#' (!EndOfLine .)*
Space       <- ' ' / '\t' / EndOfLine
EndOfLine   <- '\r\n' / '\n' / '\r'
EndOfFile   <- !.