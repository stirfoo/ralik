# java.peg
# Grammar from: The Java Language Specification, Java SE 7 Edition
# Friday, April  6 2012

# Issues
# * SimpleTypeName not found
# * ClassName not found

Identifier <- IDENTIFIER

Literal
  <- IntegerLiteral
   / FloatingPointLiteral
   / BooleanLiteral
   / CharacterLiteral
   / StringLiteral
   / 'true'
   / 'false'
   / 'null'

IntegerLiteral <- INTEGER

FloatingPointLiteral <- FLOAT

CharacterLiteral <- CHARACTER

StringLiteral <- STRING

QualifiedName
  <- Identifier ('.' Identifier)*

JavaType
  <- PrimitiveType
   / ReferenceType

PrimitiveType
  <- 'boolean'
   / 'byte'
   / 'short'
   / 'int'
   / 'float'
   / 'long'
   / 'double'
   / 'char'

ReferenceType
  <- ClassOrInterfaceType
   / Identifier
   / ArrayType

ClassOrInterfaceType
  <- ClassType
   / InterfaceType

ClassType <- TypeDeclSpecifier TypeArguments?

InterfaceType <- TypeDeclSpecifier TypeArguments?

TypeDeclSpecifier
  <- Identifier
   / ClassOrInterfaceType '.' Identifier

ArrayType <- JavaType '[' ']'

TypeParameter <- Identifier TypeBound?

TypeBound
  <- 'extends' Identifier
   / 'extends' ClassOrInterfaceType ('&' InterfaceType)*

TypeArguments <- '<' TypeArgumentList '>'

TypeArgumentList <- TypeArgument (',' TypeArgument)*

TypeArgument
  <- ReferenceType
   / Wildcard

Wildcard <- '?' WildcardBounds?

WildcardBounds
  <- 'extends' ReferenceType
   / 'super' ReferenceType

# 7.3 Compilation Units

CompilationUnit <- PackageDeclaration? ImportDeclaration* TypeDeclaration*

# 7.4 Package Declarations

PackageDeclaration <- Annotation* 'package' QualifiedName ';'

# 7.5 Import Declarations

ImportDeclaration
  <- 'import' 'static'? QualifiedName ('.' '*')? ';'

# 7.5 Top Level JavaType Declarations

TypeDeclaration
  <- ';'
   / ClassDeclaration
   / InterfaceDeclaration

# 8.1 Class Declaration

ClassDeclaration
  <- NormalClassDeclaration
   / EnumDeclaration

NormalClassDeclaration
  <- ClassModifier* 'class' Identifier TypeParameters? Super? Interfaces?
     ClassBody

ClassModifier
  <- 'public'
   / 'protected'
   / 'private'
   / 'abstract'
   / 'static'
   / 'final'
   / 'strictfp'
   / Annotation

TypeParameters <- '<' TypeParameterList '>'

TypeParameterList <- TypeParameter (',' TypeParameter)*

Super <- 'extends' ClassType

Interfaces <- 'implements' InterfaceTypeList

InterfaceTypeList <- InterfaceType (',' InterfaceType)*

ClassBody <- '{' ClassBodyDeclaration* '}'

ClassBodyDeclaration
  <- ClassMemberDeclaration
   / 'static'? Block
   / ConstructorDeclaration

ClassMemberDeclaration
  <- FieldDeclaration
   / MethodDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   / ';'

FieldDeclaration <- FieldModifier* JavaType VariableDeclarators ';'

VariableDeclarators <- VariableDeclarator (',' VariableDeclarator)*

VariableDeclarator <- VariableDeclaratorId ('=' VariableInitializer)?

VariableDeclaratorId <- Identifier ('[' ']')*

VariableInitializer
  <- Expression
   / ArrayInitializer

FieldModifier
  <- 'public'
   / 'protected'
   / 'private'
   / 'static'
   / 'final'
   / 'voltatile'
   / 'transient'
   / Annotation

# 8.4 Method Declaration

MethodDeclaration <- MethodHeader MethodBody

MethodHeader
  <- MethodModifier* TypeParameters? Result MethodDeclarator Throws?

Result
  <- JavaType
   / 'void'

MethodDeclarator <- Identifier '(' FormalParameterList? ')'
                    ('[' ']')* # this is to support legacy code

# XXX: ambiguous, may need a &look-ahead for ')'

FormalParameterList <- (FormalParameters ',')?  LastFormalParameter

FormalParameters <- FormalParameter (',' FormalParameter)*

FormalParameter <- VariableModifier* JavaType VariableDeclaratorId

VariableModifier
  <- 'final'
   / Annotation

LastFormalParameter
  <- VariableModifier* JavaType '...' VariableDeclaratorId
   / FormalParameter

MethodModifier
  <- 'public'
   / 'protected'
   / 'private'
   / 'abstract'
   / 'static'
   / 'final'
   / 'synchronized'
   / 'native'
   / 'strictfp'
   / Annotation

Throws <- 'throws' ExceptionTypeList

ExceptionTypeList <- ExceptionType (',' ExceptionType)*

ExceptionType
  <- ClassType
   / Identifier

MethodBody
  <- ';'
   / Block

# 8.8 Constructor Declarations

ConstructorDeclaration
  <- ConstructorModifier* ConstructorDeclarator Throws? ConstructorBody

ConstructorDeclarator
  <- TypeParameters? SimpleTypeName '(' FormalParameterList? ')'

ConstructorModifier
  <- 'public'
   / 'protected'
   / 'private'
   / Annotation

ConstructorBody <- '{' ExplicitConstructorInvocation? BlockStatement* '}'

ExplicitConstructorInvocation
  <- NonWildTypeArguments? 'this' Arguments ';'
   / NonWildTypeArguments? 'super' Arguments ';'
   / Primary '.' NonWildTypeArguments? 'super' Arguments ';'

NonWildTypeArguments <- '<' ReferenceTypeList '>'

ReferenceTypeList <- ReferenceType (',' ReferenceType)*

# 8.9 Enums

EnumDeclaration <- ClassModifier* 'enum' Identifier Interfaces? EnumBody

EnumBody <- '{' EnumConstants? ','? EnumBodyDeclarations? '}'

EnumConstants <- EnumConstant (',' EnumConstant)*

EnumConstant <- Annotation* Identifier Arguments? ClassBody?

Arguments <- '(' ArgumentList? ')'

EnumBodyDeclarations <- ';' ClassBodyDeclaration*

# 9.1 Interface Declarations

InterfaceDeclaration
  <- NormalInterfaceDeclaration
   / AnnotationTypeDeclaration

NormalInterfaceDeclaration
  <- InterfaceModifier* 'interface' Identifier TypeParameters?
     ExtendsInterfaces? InterfaceBody

InterfaceModifier
  <- 'public'
   / 'protected'
   / 'private'
   / 'abstract'
   / 'static'
   / 'strictfp'
   / Annotation

ExtendsInterfaces <- 'extends' InterfaceTypeList

InterfaceBody <- '{' InterfaceMemberDeclaration* '}'

InterfaceMemberDeclaration
  <- ConstantDeclaration
   / AbstractMethodDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   / ';'

# 9.3 Field Constants

ConstantDeclaration <- ConstantModifier* JavaType VariableDeclarators ';'

ConstantModifier
  <- 'public'
   / 'static'
   / 'final'
   / Annotation

# 9.4 Abstract Method Declarations

AbstractMethodDeclaration
  <- AbstractMethodModifier* TypeParameters? Result MethodDeclarator Throws?
     ';'

AbstractMethodModifier
  <- 'public'
   / 'abstract'
   / Annotation

# 9.6 Annotation Types

AnnotationTypeDeclaration
  <- InterfaceModifier* '@' 'interface' Identifier AnnotationTypeBody

AnnotationTypeBody <- '{' AnnotationTypeElementDeclaration* '}'

AnnotationTypeElementDeclaration
  <- AbstractMethodModifier* JavaType Identifier '(' ')' Dims? DefaultValue? ';'
   / ConstantDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   / EnumDeclaration
   / AnnotationTypeDeclaration
   / ';'

DefaultValue <- 'default' ElementValue

Annotation
  <- NormalAnnotation
   / SingleElementAnnotation
   / MarkerAnnotation

NormalAnnotation <- '@' QualifiedName '(' ElementValuePairs? ')'

ElementValuePairs <- ElementValuePair (',' ElementValuePair)*

ElementValuePair <- Identifier '=' ElementValue

ElementValue
  <- ConditionalExpression
   / Annotation
   / ElementValueArrayInitializer

ElementValueArrayInitializer <- '{' ElementValues? ','? '}'

ElementValues <- ElementValue (',' ElementValue)*

MarkerAnnotation <- '@' Identifier

SingleElementAnnotation <- '@' Identifier '(' ElementValue ')'

# 10.6 Array Initializers

ArrayInitializer <- '{' VariableInitializers? ','? '}'

VariableInitializers <- VariableInitializer (',' VariableInitializer)*

# 14.2 Blocks

Block <- '{' BlockStatement* '}'

BlockStatement
  <- LocalVariableDeclarationStatement
   / ClassDeclaration
   / Statement

# 14.4 Local Variable Declaration Statement

LocalVariableDeclarationStatement <- LocalVariableDeclaration ';'

LocalVariableDeclaration <- VariableModifier* JavaType VariableDeclarators

# 14.5 Statements

Statement
  <- StatementWithoutTrailingSubstatement
   / LabeledStatement
   / IfThenStatement
   / IfThenElseStatement
   / WhileStatement
   / ForStatement

StatementWithoutTrailingSubstatement
  <- Block
   / EmptyStatement
   / ExpressionStatement
   / AssertStatement
   / SwitchStatement
   / DoStatement
   / BreakStatement
   / ContinueStatement
   / ReturnStatement
   / SynchronizedStatement
   / ThrowStatement
   / TryStatement

StatementNoShortIf
  <- StatementWithoutTrailingSubstatement
   / LabeledStatementNoShortIf
   / IfThenElseStatementNoShortIf
   / WhileStatementNoShortIf
   / ForStatementNoShortIf

# 14.6 The Empty Statement

EmptyStatement <- ';'

# Labeled Statement

LabeledStatement <- Identifier ':' Statement

LabeledStatementNoShortIf <- Identifier ':' StatementNoShortIf

# 14.8 Expression Statements

ExpressionStatement <- StatementExpression ';'

StatementExpression
  <- Assignment
   / PreIncrementExpression
   / PreDecrementExpression
   / PostIncrementExpression
   / PostDecrementExpression
   / MethodInvocation
   / ClassInstanceCreationExpression

# 14.9 The if Statement

IfThenStatement <- 'if' '(' Expression ')' Statement

IfThenElseStatement <- 'if' '(' Expression ')' StatementNoShortIf
                       'else' Statement

IfThenElseStatementNoShortIf <- 'if' '(' Expression ')' StatementNoShortIf
                                'else' StatementNoShortIf

# 14.10 The assert Statement

AssertStatement
  <- 'assert' Expression ';'
   / 'assert' Expression ':' Expression ';'

# 14.11 The switch Statement

SwitchStatement <- 'switch' '(' Expression ')' SwitchBlock

SwitchBlock <- '{' SwitchBlockStatementGroup* SwitchLabel* '}'

SwitchBlockStatementGroup <- SwitchLabel+ BlockStatement+

SwitchLabel
  <- 'case' ConstantExpression ':'
   / 'case' Identifier ':'
   / 'default' ':'

# 14.12 The while Statement

WhileStatement <- 'while' '(' Expression ')' Statement

WhileStatementNoShortIf <- 'while' '(' Expression ')' StatementNoShortIf

# 14.13 The do Statement

DoStatement <- 'do' Statement 'while' '(' Expression ')' ';'

# 14.14 The for Statement

ForStatement
  <- BasicForStatement
   / EnhancedForStatement

BasicForStatement <- 'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')'
                     Statement

ForStatementNoShortIf <- 'for' '(' ForInit? ';' Expression? ';' ForUpdate? ')'
                          StatementNoShortIf

ForInit
  <- StatementExpressionList
   / LocalVariableDeclaration

ForUpdate <- StatementExpressionList

StatementExpressionList <- StatementExpression (',' StatementExpression)*

EnhancedForStatement <- 'for' '(' FormalParameter ':' Expression ')' Statement

# 14.15 The break Statement

BreakStatement <- 'break' Identifier? ';'

# 14.16 The continue Statement

ContinueStatement <- 'continue' Identifier? ';'

# 14.17 The return Statement

ReturnStatement <- 'return' Expression? ';'

# 14.18 The throw Statement

ThrowStatement <- 'throw' Expression ';'

# 14.19 The synchronized Statement

SynchronizedStatement <- 'synchronized' '(' Expression ')' Block

# 14.20 The try Statement

TryStatement
  <- 'try' Block Catches
   / 'try' Block Catches? Finally

Catches <- CatchClause+

CatchClause <- 'catch' '(' FormalParameter ')' Block

Finally <- 'finally' Block

# 15.8 Primary Expressions

Primary
  <- PrimaryNoNewArray
   / ArrayCreationExpression

PrimaryNoNewArray
  <- Literal
   / JavaType '.' 'class'
   / 'void' '.' 'class'
   / 'this'
   / ClassName '.' 'this'
   / '(' Expression ')'
   / ClassInstanceCreationExpression
   / FieldAccess
   / MethodInvocation
   / ArrayAccess

ClassInstanceCreationExpression
  <- 'new' TypeArguments? ClassOrInterfaceType Arguments ClassBody?
   / Primary '.' 'new' TypeArguments? Identifier TypeArguments?
     Arguments ClassBody?

ArgumentList <- Expression (',' Expression)*

# 15.10 Array Creation Expressions

ArrayCreationExpression
  <- 'new' PrimitiveType DimExpr+ Dims?
   / 'new' ClassOrInterfaceType DimExpr+ Dims?
   / 'new' PrimitiveType Dims ArrayInitializer
   / 'new' ClassOrInterfaceType Dims ArrayInitializer

DimExpr <- '[' Expression ']'

Dims <- ('[' ']')+

# 15.11 Field Access Expressions

FieldAccess
  <- Primary '.' Identifier
   / 'super' '.' Identifier
   / ClassName '.' 'super' '.' Identifier

# 15.12 Method Invocation Expressions

MethodInvocation
  <- QualifiedName Arguments
   / Primary '.' NotWildTypeArguments? Identifier Arguments
   / 'super' '.' NonWildTypeArguments? Identifier Arguments
   / ClassName 'super' '.' NonWildTypeArguments? Identifier Arguments
   / QualifiedName '.' NonWildTypeArguments Identifier Arguments

# 15.13 Array Access Expressions

ArrayAccess
  <- QualifiedName '[' Expression ']'
   / PrimaryNoNewArray '[' Expression ']'

# 15.14 Postfix Expressions

PostfixExpression
  <- Primary
   / QualifiedName
   / PostIncrementExpression
   / PostDecrementExpression

PostIncrementExpression <- PostfixExpression '++'

PostDecrementExpression <- PostfixExpression '--'

# 15.15 Unary Operators

UnaryExpression
  <- PreIncrementExpression
   / PreDecrementExpression
   / '+' UnaryExpression
   / '-' UnaryExpression
   / UnaryExpressionNotPlusMinus

PreIncrementExpression <- '++' UnaryExpression

PreDecrementExpression <- '--' UnaryExpression

UnaryExpressionNotPlusMinus
  <- PostfixExpression
   / '~' UnaryExpression
   / '!' UnaryExpression
   / CastExpression

# 15.16 Cast Expression

CastExpression
  <- '(' PrimitiveType ')' UnaryExpression
   / '(' PrimitiveType ')' UnaryExpressionNotPlusMinus

# 15.17 Multiplicative Operators

MultiplicativeExpression
  <- UnaryExpression ([*/%] UnaryExpression)*

# 15.18 Additive Operators

AdditiveExpression
  <- MultiplicativeExpression ([+-] MultiplicativeExpression)*

# 15.19 Shift Operators

ShiftExpression
  <- AdditiveExpression (('<<' / '>>>' / '>>') AdditiveExpression)*

# 15.20 Relational Operators

RelationalExpression
  <- ShiftExpression ( (('<=' / '<' / '>=' / '>') ShiftExpression)
		      / ('instanceof' ReferenceType))*

# 15.21 Equality Operators

EqualityExpression
  <- RelationalExpression (('==' / '!=') RelationalExpression)*

# 15.22 Bitwise and Logical Operators

AndExpression <- EqualityExpression ('&' EqualityExpression)*

ExclusiveOrExpression <- AndExpression ('^' AndExpression)*

InclusiveOrExpression <- ExclusiveOrExpression ('|' ExclusiveOrExpression)*

# 15.23 Conditional-And Operator &&

ConditionalAndExpression
  <- InclusiveOrExpression ('&&' InclusiveOrExpression)*

# 15.23 Conditional-Or Operator ||

ConditionalOrExpression
  <- ConditionalAndExpression ('||' ConditionalAndExpression)*

# 15.25 Conditional Operator ? :

ConditionalExpression
  <- ConditionalOrExpression ('?' Expression ':' ConditionalExpression)?

# 15.26 Assignment Operators

AssignmentExpression
  <- ConditionalExpression
   / Assignment

Assignment <- LeftHandSide AssignmentOperator AssignmentExpression

LeftHandSide
  <- QualifiedName
   / FieldAccess
   / ArrayAccess

AssignmentOperator
  <- '='
   / '*='
   / '/='
   / '%='
   / '+='
   / '-='
   / '<<='
   / '>>>='
   / '>>='
   / '&='
   / '^='
   / '|='

# 15.27 Expression

Expression <- AssignmentExpression

# 15.28 ConstantExpression

ConstantExpression <- Expression
