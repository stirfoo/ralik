* Collectors
  Syntax:
  
  - <lfoo :: Results of parsers arguments are conj'd onto the front of a list.
	     This is for repetitive parsers like g+, g*, etc.

  - <vfoo :: Results of parsers arguments are conj'd onto the end of a vector.
	     This is for repetitive parsers like g+, g*, etc.

  Basic parsers and their collector versions.

  - (<g & forms) ::
    Return a collection, else nil.
    - (<lg & forms)
      
      (<lg p1 p2 p3) => (p3-result p2-result p1-result)
    - (<vg & forms)
      
      (<vg p1 p2 p3) => [p1-result p2-result p3-result]
  - (g+ & forms) ::
    - <lg+
    - <gv+
  - (g* & forms) ::
    - <lg*
    - <gv*
  - (g? & forms) ::
    - <lg?
    - <gv?
  

* Nth-Type Selectors
  
  Provide a method for returning the nth argument of a *g* parser.
  
  - <Ng ::
    
    N is the one-based index of the parser argument.

    The following will return the result of (expr) but only if the basic
    parser *g* succeeds.
    : (<2g \( (expr) \))
    This expands to:
    : (let [e# (atom nil)]     ; final result
    :   (g                     ; all arguments must match, in order
    :      \(                  ; match (
    :      (reset! e# (expr))  ; Set e# to the result of (expr), return that.
    :                          ; So if (expr) fails, g fails.
    :      \)                  ; match )
    :      @e#                 ; g succeeded. Deref and return the result
    :                          ; of (expr)
    :      ))
    <1g, <2g, <3g, <4g, and <5g are currently implemted in ralik.core.

    <0g is a special case where a vector of all forms is returned.

    
    
